#include <dt-bindings/zmk/modifiers.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Configure hold-tap behaviors (optional: using default 200ms tapping term)

&mt {
    tapping_term_ms = <200>;
    flavor = "tap-preferred";
};   // Mod-tap (for home row mods)
&lt { tapping_term_ms = <200>; };   // Layer-tap (for layer keys)
/ {
    behaviors {
        next_prev: next_prev {
            compatible = "zmk,behavior-tap-dance";
            label = "NEXT_PREV";
            #binding-cells = <0>;
            bindings = <&kp C_NEXT>, <&kp C_PREV>;

            tapping-term-ms = <150>;
        };

        slowlayer: slowlayer {
            compatible = "zmk,behavior-hold-tap";
            label = "SLOWLAYER";
            #binding-cells = <2>;
            bindings = <&to>, <&kp>;

            tapping-term-ms = <500>;
            flavor = "tap-preferred";
        };

        td_excla_minus: td_excla_minus {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_EXCLA_MINUS";
            #binding-cells = <0>;
            bindings = <&mt QUESTION EXCLAMATION>, <&kp MINUS>, <&triple_excla>;
        };

        screenshot_w: screenshot_w {
            compatible = "zmk,behavior-tap-dance";
            label = "SCREENSHOT_W";
            #binding-cells = <0>;
            bindings = <&kp W>, <&mt LG(LS(NUMBER_3)) W>;

            tapping-term-ms = <150>;
        };

        screenshot_r: screenshot_r {
            compatible = "zmk,behavior-tap-dance";
            label = "SCREENSHOT_R";
            #binding-cells = <0>;
            bindings = <&kp R>, <&mt LG(LS(LC(NUMBER_4))) R>;

            tapping-term-ms = <150>;
        };

        screenshot_e: screenshot_e {
            compatible = "zmk,behavior-tap-dance";
            label = "SCREENSHOT_E";
            #binding-cells = <0>;
            bindings = <&kp E>, <&mt LG(LS(NUMBER_4)) E>;

            tapping-term-ms = <150>;
        };

        power_return: power_return {
            compatible = "zmk,behavior-tap-dance";
            label = "POWER_RETURN";
            #binding-cells = <0>;
            bindings = <&mt LEFT_COMMAND RETURN>, <&mt LG(RETURN) RETURN>;

            tapping-term-ms = <150>;
        };
    };

    macros {
        ale_email: ale_email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp L &kp E &kp J &kp A &kp N &kp D &kp R &kp O &kp W &kp U &kp N &kp D &kp E &kp R &kp L &kp I &kp C &kp H &kp AT &kp G &kp M &kp A &kp L &kp DOT &kp C &kp O &kp M>;
            label = "ALE_EMAIL";
        };

        pewu_email: pewu_email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp P &kp E &kp W &kp U &kp AT &kp H &kp E &kp Y &kp DOT &kp C &kp O &kp M>;
            label = "PEWU_EMAIL";
        };

        macro_to_cmd: macro_to_cmd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&to 5>,
                <&macro_press>,
                <&kp LEFT_COMMAND>,
                <&macro_tap>,
                <&kp TAB>;

            label = "MACRO_TO_CMD";
        };

        command_up: macro_release {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_release>,
                <&kp LEFT_COMMAND>,
                <&macro_tap>,
                <&to 0>;

            label = "MACRO_RELEASE";
        };

        triple_excla: triple_excla {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EXCL &kp EXCL &kp EXCL>;
            label = "TRIPLE_EXCLA";
        };

        macro_esc_release: macro_esc_release {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_release>,
                <&kp LEFT_COMMAND>,
                <&macro_tap>,
                <&kp ESCAPE &to 0>;

            label = "MACRO_ESC_RELEASE";
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <3 2>;
            layers = <0>;
        };

        davinci_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <2 3>;
            layers = <4>;
        };

        davinci_ret {
            bindings = <&kp RET>;
            key-positions = <12 13>;
            layers = <4>;
        };

        combo_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <12 13>;
            layers = <0>;
        };

        combo_copy {
            bindings = <&kp LG(C)>;
            key-positions = <23 22>;
            layers = <0>;
        };

        combo_paste {
            bindings = <&kp LG(V)>;
            key-positions = <24 23>;
            layers = <0>;
        };

        tabber {
            bindings = <&macro_to_cmd>;
            key-positions = <12 13 11>;
            layers = <0>;
        };

        layer7_esc {
            bindings = <&macro_esc_release>;
            key-positions = <2 3>;
            layers = <5>;
        };

        combo_finder {
            bindings = <&kp LG(LA(SPACE))>;
            key-positions = <20 21>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // Base Layer: QWERTY with home-row mods and layer-tap keys

        default_layer {
            bindings = <
&trans  &mt F10 Q  &screenshot_w       &screenshot_e   &screenshot_r                 &kp T             &kp Y                        &kp U                  &kp I            &slowlayer 4 O  &slowlayer 5 P          &trans
&trans  &lt 1 A    &mt LEFT_CONTROL S  &mt LEFT_ALT D  &kp F                         &kp G             &kp H                        &kp J                  &kp K            &kp L           &mt LA(E) SINGLE_QUOTE  &trans
&trans  &lt 2 Z    &kp X               &kp C           &kp V                         &mt CAPSLOCK B    &mt LA(N) N                  &kp M                  &mt COLON COMMA  &mt SLASH DOT   &td_excla_minus         &trans
                                       &lt 3 SPACE     &mt LEFT_SHIFT LA(BACKSPACE)  &power_return     &mt RIGHT_COMMAND BACKSPACE  &mt RIGHT_SHIFT SPACE  &kp RG(SPACE)
            >;
        };

        nav_layer {
            bindings = <
&trans  &trans  &kp LA(LEFT)  &kp UP     &kp LA(RIGHT)  &kp ESCAPE           &kp MINUS         &kp N7                    &kp N8  &kp N9  &kp FSLH   &trans
&trans  &trans  &kp LEFT      &kp DOWN   &kp RIGHT      &kp LC(LA(LG(O)))    &kp LS(ASTERISK)  &mt RIGHT_SHIFT NUMBER_4  &kp N5  &kp N6  &kp PLUS   &trans
&trans  &trans  &kp LG(LEFT)  &trans     &kp LG(RIGHT)  &kp TAB              &kp DOT           &kp N1                    &kp N2  &kp N3  &kp EQUAL  &trans
                              &kp SPACE  &trans         &trans               &trans            &trans                    &kp N0
            >;
        };

        sym_layer {
            bindings = <
&trans  &none  &none      &none          &none          &none     &kp LEFT_BRACE   &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
&trans  &none  &kp GRAVE  &kp SEMICOLON  &kp BACKSLASH  &none     &kp RIGHT_BRACE  &kp DOLLAR     &kp PERCENT   &kp CARET             &kp PIPE               &trans
&trans  &none  &none      &none          &none          &none     &kp LBKT         &kp RBKT       &kp AT_SIGN   &kp HASH              &kp LS(LA(MINUS))      &trans
                          &trans         &trans         &trans    &trans           &trans         &trans
            >;
        };

        media_layer {
            bindings = <
&trans  &kp C_PLAY_PAUSE  &next_prev   &kp C_VOLUME_DOWN  &kp C_VOLUME_UP       &kp C_MUTE              &kp C_PLAY_PAUSE  &next_prev  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE  &trans
&trans  &ale_email        &pewu_email  &none              &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC    &none             &none       &none              &none            &none       &trans
&trans  &trans            &trans       &trans             &trans                &trans                  &none             &none       &none              &none            &none       &trans
                                       &trans             &trans                &trans                  &trans            &trans      &trans
            >;
        };

        davinci {
            bindings = <
&trans  &kp Q   &trans  &kp UP_ARROW       &kp DOWN_ARROW   &trans                    &trans  &trans  &trans  &slowlayer 0 O  &trans  &trans
&trans  &trans  &trans  &trans             &trans           &trans                    &trans  &trans  &trans  &trans          &trans  &trans
&trans  &trans  &trans  &trans             &mt LS(LG(V)) V  &trans                    &trans  &trans  &trans  &trans          &trans  &trans
                        &kp LS(BACKSPACE)  &kp LS(L)        &mt LEFT_COMMAND SPACE    &trans  &trans  &trans
            >;
        };

        tablayer {
            bindings = <
&trans  &trans  &trans       &trans       &trans   &trans         &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LS(TAB)  &kp LS(TAB)  &kp TAB  &trans         &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans       &trans       &trans   &trans         &trans  &trans  &trans  &trans  &trans  &trans
                             &trans       &trans   &command_up    &trans  &trans  &trans
            >;
        };

        bt_layer {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_PRV  &bt BT_NXT  &trans  &trans  &to 0   &trans
&trans  &bt BT_CLR    &bt BT_CLR_ALL  &trans        &trans        &trans          &trans      &trans      &trans  &trans  &trans  &trans
&trans  &trans        &trans          &trans        &trans        &trans          &trans      &trans      &trans  &trans  &trans  &trans
                                      &trans        &trans        &trans          &trans      &trans      &trans
            >;
        };
    };
};
